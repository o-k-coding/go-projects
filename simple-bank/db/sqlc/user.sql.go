// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, hashed_password, full_name, email, created_at, password_changed_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashedPassword"`
	FullName       string `json:"fullName"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, full_name, email, created_at, password_changed_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one

UPDATE users
SET
  hashed_password = coalesce($1, hashed_password),
  full_name = coalesce($2, full_name),
  email = coalesce($3, email)
WHERE
  username = $4
RETURNING id, username, hashed_password, full_name, email, created_at, password_changed_at
`

type UpdateUserParams struct {
	HashedPassword sql.NullString `json:"hashedPassword"`
	FullName       sql.NullString `json:"fullName"`
	Email          sql.NullString `json:"email"`
	Username       string         `json:"username"`
}

// Option one with flags and case statement
// UPDATE users
// SET
//   hashed_password = CASE
//     WHEN @set_hashed_password::boolean = TRUE THEN @hashed_password::text
//     ELSE hashed_password
//   END,
//   full_name = CASE
//     WHEN @set_full_name::boolean = TRUE THEN @full_name::text
//     ELSE full_name
//   END,
//   email = CASE
//     WHEN @set_email::boolean = TRUE THEN @email::text
//     ELSE email
//   END
// WHERE
//   username = @username::text
// RETURNING *;
// Better option using nullable fields with coalesce
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}
